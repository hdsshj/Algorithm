{
    "sourceFile": "Python/week_1/베르트랑_공준/베르트랑_공주.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1639292066041,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639292453076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,10 @@\n n = input()\n n = int(n)\n \n def find_prime_num (num) :\n+  prime_num_count = 0\n+  prime_check = [False]\n   \n   return\n \n print(find_prime_num(n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639293082060,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,17 @@\n n = input()\n n = int(n)\n \n def find_prime_num (num) :\n-  prime_num_count = 0\n-  prime_check = [False]\n-  \n+  n += 1                            # for문 사용을 위한 n += 1\n+  prime = [True] * n                # n개의 [True]가 있는 리스트 생성\n+  for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n+    if prime[i]:                    # prime[i]가 True일때\n+      for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n+        prime[j] = False\n+\n+  for i in range(m, n):\n+    if i > 1 and prime[i] == True:  # 1 이상이면서 남은 소수들을 출력\n+      print(i)\n   return\n \n print(find_prime_num(n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639293185028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n \n n = input()\n n = int(n)\n \n-def find_prime_num (num) :\n+def find_prime_num (n) :\n   n += 1                            # for문 사용을 위한 n += 1\n   prime = [True] * n                # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n"
                },
                {
                    "date": 1639293273094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n n = int(n)\n \n def find_prime_num (n) :\n   n += 1                            # for문 사용을 위한 n += 1\n-  prime = [True] * n                # n개의 [True]가 있는 리스트 생성\n+  prime = [True] * (2 * n)                # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n"
                }
            ],
            "date": 1639292066041,
            "name": "Commit-0",
            "content": "# 베르트랑 공준은 임의의 자연수 n에 대하여, n보다 크고, 2n보다 작거나 같은 소수는 적어도 하나 존재한다는 내용을 담고 있다.\n# 이 명제는 조제프 베르트랑이 1845년에 추측했고, 파프누티 체비쇼프가 1850년에 증명했다.\n# 예를 들어, 10보다 크고, 20보다 작거나 같은 소수는 4개가 있다. (11, 13, 17, 19) 또, 14보다 크고, 28보다 작거나 같은 소수는 3개가 있다. (17,19, 23)\n# 자연수 n이 주어졌을 때, n보다 크고, 2n보다 작거나 같은 소수의 개수를 구하는 프로그램을 작성하시오. \n\n# 입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 케이스는 n을 포함하는 한 줄로 이루어져 있다.\n# 입력의 마지막에는 0이 주어진다.\n\n# 각 테스트 케이스에 대해서, n보다 크고, 2n보다 작거나 같은 소수의 개수를 출력한다.\n\n# 입력\n# 1 ≤ n ≤ 123,456\n\n# 처리\n# \n\n# 출력\n# n < result <= 2n\n\nn = input()\nn = int(n)\n\ndef find_prime_num (num) :\n  \n  return\n\nprint(find_prime_num(n))"
        }
    ]
}