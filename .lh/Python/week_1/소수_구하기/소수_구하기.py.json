{
    "sourceFile": "Python/week_1/소수_구하기/소수_구하기.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 113,
            "patches": [
                {
                    "date": 1639017101785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1639017111336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,2 @@\n # M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.\n+# \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017122545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,2 @@\n # M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.\n-# \n\\ No newline at end of file\n+# 첫째 줄에 자연수 M과 N이 빈 칸을 사이에 두고 주어진다. (1 ≤ M ≤ N ≤ 1,000,000) M이상 N이하의 소수가 하나 이상 있는 입력만 주어진다.\n"
                },
                {
                    "date": 1639017132519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,2 +1,3 @@\n # M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.\n # 첫째 줄에 자연수 M과 N이 빈 칸을 사이에 두고 주어진다. (1 ≤ M ≤ N ≤ 1,000,000) M이상 N이하의 소수가 하나 이상 있는 입력만 주어진다.\n+# \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017144982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,5 @@\n # M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.\n # 첫째 줄에 자연수 M과 N이 빈 칸을 사이에 두고 주어진다. (1 ≤ M ≤ N ≤ 1,000,000) M이상 N이하의 소수가 하나 이상 있는 입력만 주어진다.\n-# \n\\ No newline at end of file\n+# 한 줄에 하나씩, 증가하는 순서대로 소수를 출력한다.\n+\n+# 예제\n"
                },
                {
                    "date": 1639017152607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,4 +2,8 @@\n # 첫째 줄에 자연수 M과 N이 빈 칸을 사이에 두고 주어진다. (1 ≤ M ≤ N ≤ 1,000,000) M이상 N이하의 소수가 하나 이상 있는 입력만 주어진다.\n # 한 줄에 하나씩, 증가하는 순서대로 소수를 출력한다.\n \n # 예제\n+# 3 16\n+\n+# 출력\n+# \n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017158263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,5 +5,6 @@\n # 예제\n # 3 16\n \n # 출력\n-# \n\\ No newline at end of file\n+# 3\n+# 5\n"
                },
                {
                    "date": 1639017418306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,4 +7,23 @@\n \n # 출력\n # 3\n # 5\n+# 7\n+# 11\n+# 13\n+\n+# 입력\n+# 1 <= M <= N <= 1,000,000 의 자연수\n+\n+# 처리\n+# M <= prime_num <= N\n+\n+# 출력\n+# 한 줄에 하나씩, 작은 순서로 소수 출력\n+\n+m, n = map(int,input().split())\n+\n+def find_prime_num (m,n) :\n+  return 1\n+\n+print(find_prime_num)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017436256,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,5 +25,5 @@\n \n def find_prime_num (m,n) :\n   return 1\n \n-print(find_prime_num)\n\\ No newline at end of file\n+print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017611314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,14 +16,18 @@\n # 1 <= M <= N <= 1,000,000 의 자연수\n \n # 처리\n # M <= prime_num <= N\n+# M 과 N 사이의 수를 반복하면서 소수인지 판단하여 출력\n \n # 출력\n # 한 줄에 하나씩, 작은 순서로 소수 출력\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n+  prime_num = 0\n+  for num in range(m, n + 1) :\n+    print(num)\n   return 1\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017718760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,12 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   prime_num = 0\n+  prime_list = []\n   for num in range(m, n + 1) :\n+    for i in prime_list :\n+      \n     print(num)\n   return 1\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017825361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,11 @@\n   prime_num = 0\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      \n-    print(num)\n-  return 1\n+      if num%i == 0 and i * i <= num :\n+        break\n+    else :\n+      prime_list.append(num)\n+  return prime_list\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017870472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0 and i * i <= num :\n         break\n-    else :\n-      prime_list.append(num)\n+      else :\n+        prime_list.append(num)\n   return prime_list\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017878981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,8 @@\n     for i in prime_list :\n       if num%i == 0 and i * i <= num :\n         break\n       else :\n-        prime_list.append(num)\n+        prime_list.append(i)\n   return prime_list\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017906205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0 and i * i <= num :\n         break\n-      else :\n-        prime_list.append(i)\n+  else :\n+    prime_list.append(num)\n   return prime_list\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017929747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,11 +28,11 @@\n   prime_num = 0\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      if num%i == 0 and i * i <= num :\n+      if num%i == 0:\n         break\n-  else :\n-    prime_list.append(num)\n+    else :\n+      prime_list.append(num)\n   return prime_list\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639017969574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   prime_num = 0\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      if num%i == 0:\n+      if num%i == 0 and i * i <= num:\n         break\n     else :\n       prime_list.append(num)\n   return prime_list\n"
                },
                {
                    "date": 1639018054660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   prime_num = 0\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      if num%i == 0 and i * i <= num:\n+      if num%i == 0:\n         break\n     else :\n       prime_list.append(num)\n   return prime_list\n"
                },
                {
                    "date": 1639018086680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,13 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  prime_num = 0\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0:\n         break\n     else :\n-      prime_list.append(num)\n-  return prime_list\n+      print(num)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639022883190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,8 @@\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0:\n         break\n-    else :\n-      print(num)\n+  else :\n+    print(num)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639022894886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,8 @@\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0:\n         break\n-  else :\n-    print(num)\n+    else :\n+      print(i)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639022918819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,7 @@\n     for i in prime_list :\n       if num%i == 0:\n         break\n     else :\n-      print(i)\n+      print(num)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639023037419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,8 @@\n     for i in prime_list :\n       if num%i == 0:\n         break\n     else :\n-      print(num)\n+      prime_list.append(num)\n+  return prime_list\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639023335571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,7 @@\n       if num%i == 0:\n         break\n     else :\n       prime_list.append(num)\n-  return prime_list\n+      print(num)\n \n\\ No newline at end of file\n-print(find_prime_num(m, n))\n+find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639023344704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,7 @@\n     for i in prime_list :\n       if num%i == 0:\n         break\n     else :\n-      prime_list.append(num)\n       print(num)\n \n find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639023355320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,8 @@\n     for i in prime_list :\n       if num%i == 0:\n         break\n     else :\n+      prime_list.append(num)\n       print(num)\n \n find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639023370422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,12 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0:\n         break\n     else :\n-      prime_list.append(num)\n       print(num)\n \n find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639023380268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,12 +24,14 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n+  prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0:\n         break\n     else :\n+      prime_list.append(num)\n       print(num)\n \n find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639023400260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,5 @@\n     else :\n       prime_list.append(num)\n       print(num)\n \n-find_prime_num(m, n)\n\\ No newline at end of file\n+print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639029579356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n def find_prime_num (m,n) :\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      if num%i == 0:\n+      if num%i == 0 and i * i <= num:\n         break\n     else :\n       prime_list.append(num)\n       print(num)\n"
                },
                {
                    "date": 1639029602087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,6 @@\n       if num%i == 0 and i * i <= num:\n         break\n     else :\n       prime_list.append(num)\n-      print(num)\n-\n+  return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639029722720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n def find_prime_num (m,n) :\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n+      print('i is',i)\n       if num%i == 0 and i * i <= num:\n         break\n     else :\n       prime_list.append(num)\n"
                },
                {
                    "date": 1639029747502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       print('i is',i)\n+      print('num is',i)\n       if num%i == 0 and i * i <= num:\n         break\n     else :\n       prime_list.append(num)\n"
                },
                {
                    "date": 1639029826339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       print('i is',i)\n-      print('num is',i)\n+      print('num is',num)\n       if num%i == 0 and i * i <= num:\n         break\n     else :\n       prime_list.append(num)\n"
                },
                {
                    "date": 1639030172938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,10 +27,10 @@\n def find_prime_num (m,n) :\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n+      print('num is',num)\n       print('i is',i)\n-      print('num is',num)\n       if num%i == 0 and i * i <= num:\n         break\n     else :\n       prime_list.append(num)\n"
                },
                {
                    "date": 1639030221294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n def find_prime_num (m,n) :\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      print('num is',num)\n-      print('i is',i)\n       if num%i == 0 and i * i <= num:\n+        print('num is',num)\n+        print('i is',i)\n         break\n     else :\n       prime_list.append(num)\n   return prime_list\n"
                },
                {
                    "date": 1639030276254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n def find_prime_num (m,n) :\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      if num%i == 0 and i * i <= num:\n+      if num%i == 0\n         print('num is',num)\n         print('i is',i)\n         break\n     else :\n"
                },
                {
                    "date": 1639030339197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n def find_prime_num (m,n) :\n   prime_list = []\n   for num in range(m, n + 1) :\n     for i in prime_list :\n-      if num%i == 0\n+      if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n     else :\n"
                },
                {
                    "date": 1639030369802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,7 +32,7 @@\n         print('num is',num)\n         print('i is',i)\n         break\n     else :\n-      prime_list.append(num)\n+      print(num)\n   return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030410244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,8 @@\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n-    else :\n-      print(num)\n+      else :\n+        print(num)\n   return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030549960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,16 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   prime_list = []\n+  prime_num = 0\n   for num in range(m, n + 1) :\n     for i in prime_list :\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n       else :\n-        print(num)\n+        prime_num = num\n+        print(prime_num)\n   return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030559467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n-      else :\n-        prime_num = num\n-        print(prime_num)\n+    else :\n+      prime_num = num\n+      print(prime_num)\n   return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030591768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n-    else :\n       prime_num = num\n       print(prime_num)\n   return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030603228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,8 @@\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n-      prime_num = num\n-      print(prime_num)\n+    prime_num = num\n+    print(prime_num)\n   return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030617421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n-    prime_num = num\n-    print(prime_num)\n+    else : \n+      prime_num = num\n+      print(prime_num)\n   return prime_list\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030667804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,7 +34,6 @@\n         print('i is',i)\n         break\n     else : \n       prime_num = num\n-      print(prime_num)\n-  return prime_list\n+      print(i)\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030705805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,8 @@\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n-    else : \n-      prime_num = num\n-      print(i)\n+  else : \n+    prime_num = num\n+    print(i)\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030859197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,13 +27,13 @@\n def find_prime_num (m,n) :\n   prime_list = []\n   prime_num = 0\n   for num in range(m, n + 1) :\n-    for i in prime_list :\n+    for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         print('num is',num)\n         print('i is',i)\n         break\n   else : \n     prime_num = num\n-    print(i)\n+    print(prime_num)\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030875961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,8 @@\n   prime_num = 0\n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n-        print('num is',num)\n-        print('i is',i)\n         break\n   else : \n     prime_num = num\n     print(prime_num)\n"
                },
                {
                    "date": 1639030893746,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,8 @@\n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n-  else : \n-    prime_num = num\n-    print(prime_num)\n+    else : \n+      prime_num = num\n+      print(prime_num)\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030908128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,6 +32,6 @@\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       prime_num = num\n-      print(prime_num)\n+      print(num)\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639030914988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,6 @@\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n-      prime_num = num\n       print(num)\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639031942469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  prime_list = []\n-  prime_num = 0\n+  \n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n"
                },
                {
                    "date": 1639031957126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  \n+  sieve = [True] \n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n"
                },
                {
                    "date": 1639031963610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  sieve = [True] \n+  sieve = [True] * n\n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n"
                },
                {
                    "date": 1639032188856,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,5 @@\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n-print(find_prime_num(m, n))\n\\ No newline at end of file\n+print(n**0.5)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639032198876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,5 @@\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n-print(n**0.5)\n\\ No newline at end of file\n+print(n**1)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639032246110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,5 @@\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n-print(n**1)\n\\ No newline at end of file\n+print(n**2)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639032279918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,5 +31,5 @@\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n-print(n**2)\n\\ No newline at end of file\n+print(n**0.5)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639032956940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  sieve = [True] * n\n+  sieve = [True] * (n - m)\n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n"
                },
                {
                    "date": 1639032998795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   sieve = [True] * (n - m)\n+  \n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n"
                },
                {
                    "date": 1639033028821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   sieve = [True] * (n - m)\n-  \n+  test = int(n ** 0.5)\n   for num in range(m, n + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n"
                },
                {
                    "date": 1639033048669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * (n - m)\n   test = int(n ** 0.5)\n-  for num in range(m, n + 1) :\n+  for num in range(2, test + 1) :\n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n"
                },
                {
                    "date": 1639033084049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,11 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * (n - m)\n   test = int(n ** 0.5)\n-  for num in range(2, test + 1) :\n+  for i in range(2, test + 1) :\n+    if sieve[i] == True : \n+      \n     for i in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n"
                },
                {
                    "date": 1639033093983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   test = int(n ** 0.5)\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n-    for i in range(2, n) :\n+     for j in range(2, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n"
                },
                {
                    "date": 1639033105583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   test = int(n ** 0.5)\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n-     for j in range(2, n) :\n+     for j in range(i+i, n) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n"
                },
                {
                    "date": 1639033119057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   test = int(n ** 0.5)\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n-     for j in range(i+i, n) :\n+     for j in range(i+i, ) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n"
                },
                {
                    "date": 1639033178587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   test = int(n ** 0.5)\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n-     for j in range(i+i, ) :\n+      for j in range(i+i, ) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n"
                },
                {
                    "date": 1639033188624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n   test = int(n ** 0.5)\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n-      for j in range(i+i, ) :\n+      for j in range(i+i,n, ) :\n       if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n"
                },
                {
                    "date": 1639033198421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,10 +29,10 @@\n   test = int(n ** 0.5)\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n-      for j in range(i+i,n, ) :\n-      if num%i == 0 and (i * i) <= num:\n+      for j in range(i+i,n,i ) :\n+        if num%i == 0 and (i * i) <= num:\n         break\n     else : \n       print(num)\n print(n**0.5)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033216773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,8 @@\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n       for j in range(i+i,n,i ) :\n-        if num%i == 0 and (i * i) <= num:\n-        break\n+        sieve[j] = \n     else : \n       print(num)\n print(n**0.5)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033229767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,8 +30,7 @@\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n       for j in range(i+i,n,i ) :\n-        sieve[j] = \n-    else : \n-      print(num)\n+        sieve[j] = False\n+  print(num)\n print(n**0.5)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033261988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,6 +31,6 @@\n     if sieve[i] == True : \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n-  print(num)\n-print(n**0.5)\n\\ No newline at end of file\n+  return [i for i in range(2, n) if sieve[i] == True]\n+print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033323081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,13 +24,14 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  sieve = [True] * (n - m)\n+  sieve = [True] * n\n   test = int(n ** 0.5)\n   for i in range(2, test + 1) :\n     if sieve[i] == True : \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n   return [i for i in range(2, n) if sieve[i] == True]\n+\n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033370811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n-  for i in range(2, test + 1) :\n+  for i in range(2, test + 1) and i >= m:\n     if sieve[i] == True : \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n"
                },
                {
                    "date": 1639033392309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n-  for i in range(2, test + 1) and i >= m:\n+  for i in range(2, test + 1) and test >= m:\n     if sieve[i] == True : \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n"
                },
                {
                    "date": 1639033414542,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n-  for i in range(2, test + 1) and test >= m:\n-    if sieve[i] == True : \n+  for i in range(2, test + 1):\n+    if sieve[i] == True and i >= m: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n   return [i for i in range(2, n) if sieve[i] == True]\n"
                },
                {
                    "date": 1639033430609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n   for i in range(2, test + 1):\n-    if sieve[i] == True and i >= m: \n+    if sieve[i] == True and i > m: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n   return [i for i in range(2, n) if sieve[i] == True]\n"
                },
                {
                    "date": 1639033440635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n   for i in range(2, test + 1):\n-    if sieve[i] == True and i > m: \n+    if sieve[i] == True \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n   return [i for i in range(2, n) if sieve[i] == True]\n"
                },
                {
                    "date": 1639033478681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,11 @@\n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n   for i in range(2, test + 1):\n-    if sieve[i] == True \n+    if sieve[i] == True: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n-  return [i for i in range(2, n) if sieve[i] == True]\n+  return [i for i in range(2, n) if sieve[i] == True and i > m]\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033487238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,7 @@\n     if sieve[i] == True: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n-  return [i for i in range(2, n) if sieve[i] == True and i > m]\n+  return [i for i in range(2, n) if sieve[i] == True and i >= m]\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033528725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,7 @@\n     if sieve[i] == True: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n-  return [i for i in range(2, n) if sieve[i] == True and i >= m]\n+  print(i for i in range(2, n) if sieve[i] == True and i >= m) \n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033571711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n   sieve = [True] * n\n   test = int(n ** 0.5)\n   for i in range(2, test + 1):\n     if sieve[i] == True: \n+      print(i) \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n-  print(i for i in range(2, n) if sieve[i] == True and i >= m) \n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033579579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,8 @@\n   test = int(n ** 0.5)\n   for i in range(2, test + 1):\n     if sieve[i] == True: \n       print(i) \n-      \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033720237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,12 @@\n   sieve = [True] * n\n   test = int(n ** 0.5)\n   for i in range(2, test + 1):\n     if sieve[i] == True: \n-      print(i) \n+      \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n+  for i in range(2, n):\n+    if sieve[i] == true and i >= m :\n+      print(i)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033735735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     if sieve[i] == True: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n-  for i in range(2, n):\n-    if sieve[i] == true and i >= m :\n-      print(i)\n+    for i in range(2, n):\n+      if sieve[i] == true and i >= m :\n+        print(i)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033749563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     if sieve[i] == True: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n-    for i in range(2, n):\n-      if sieve[i] == true and i >= m :\n-        print(i)\n+  for i in range(2, n):\n+    if sieve[i] == True and i >= m :\n+      print(i)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033812230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n+  if \n   for i in range(2, test + 1):\n     if sieve[i] == True: \n       \n       for j in range(i+i,n,i ) :\n"
                },
                {
                    "date": 1639033851405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,15 +26,16 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * n\n   test = int(n ** 0.5)\n-  if \n   for i in range(2, test + 1):\n     if sieve[i] == True: \n       \n       for j in range(i+i,n,i ) :\n         sieve[j] = False\n   for i in range(2, n):\n+    if i == 1 :\n+      continue\n     if sieve[i] == True and i >= m :\n       print(i)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033899962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,19 +23,15 @@\n # 한 줄에 하나씩, 작은 순서로 소수 출력\n \n m, n = map(int,input().split())\n \n-def find_prime_num (m,n) :\n-  sieve = [True] * n\n-  test = int(n ** 0.5)\n-  for i in range(2, test + 1):\n-    if sieve[i] == True: \n-      \n-      for j in range(i+i,n,i ) :\n-        sieve[j] = False\n-  for i in range(2, n):\n-    if i == 1 :\n-      continue\n-    if sieve[i] == True and i >= m :\n-      print(i)\n+def find_prime_num (x,y) :\n+  for i in range(x, y+1):\n+    if i == 1: #1은 소수가 아뉘지!\n+        continue\n+    for j in range(2, int(i** 0.5)+1 ):\n+        if i%j==0:\n+            break\n+    else:\n+        print(i)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639033995134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,11 @@\n # 한 줄에 하나씩, 작은 순서로 소수 출력\n \n m, n = map(int,input().split())\n \n-def find_prime_num (x,y) :\n-  for i in range(x, y+1):\n-    if i == 1: #1은 소수가 아뉘지!\n+def find_prime_num (m,n) :\n+  for i in range(m, n+1): \n+    if i == 1: # 1은 무시\n         continue\n     for j in range(2, int(i** 0.5)+1 ):\n         if i%j==0:\n             break\n"
                },
                {
                    "date": 1639034150108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n def find_prime_num (m,n) :\n   for i in range(m, n+1): \n     if i == 1: # 1은 무시\n         continue\n-    for j in range(2, int(i** 0.5)+1 ):\n+    for j in range(2, int(i** 0.5) + 1 ): # i의 제곱근 까지만 반복\n         if i%j==0:\n             break\n     else:\n         print(i)\n"
                },
                {
                    "date": 1639034191954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,5 @@\n             break\n     else:\n         print(i)\n \n-print(find_prime_num(m, n))\n\\ No newline at end of file\n+find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639035401429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n+  sieve = [True] * (n-m)\n   for i in range(m, n+1): \n     if i == 1: # 1은 무시\n         continue\n     for j in range(2, int(i** 0.5) + 1 ): # i의 제곱근 까지만 반복\n"
                },
                {
                    "date": 1639035452824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,9 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   sieve = [True] * (n-m)\n+  num = int(n ** 0.5)\n   for i in range(m, n+1): \n     if i == 1: # 1은 무시\n         continue\n     for j in range(2, int(i** 0.5) + 1 ): # i의 제곱근 까지만 반복\n"
                },
                {
                    "date": 1639035496087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,14 +26,13 @@\n \n def find_prime_num (m,n) :\n   sieve = [True] * (n-m)\n   num = int(n ** 0.5)\n-  for i in range(m, n+1): \n-    if i == 1: # 1은 무시\n-        continue\n-    for j in range(2, int(i** 0.5) + 1 ): # i의 제곱근 까지만 반복\n-        if i%j==0:\n-            break\n-    else:\n-        print(i)\n+  for i in range(2, num + 1):\n+        if sieve[i] == True:           # i가 소수인 경우 \n+            for j in range(i+i, n, i): # i이후 i의 배수들을 False 판정\n+                sieve[j] = False\n \n+    # 소수 목록 산출\n+    return [i for i in range(2, n) if sieve[i] == True]\n+\n find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639035548147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,7 +32,7 @@\n             for j in range(i+i, n, i): # i이후 i의 배수들을 False 판정\n                 sieve[j] = False\n \n     # 소수 목록 산출\n-    return [i for i in range(2, n) if sieve[i] == True]\n+  return [i for i in range(2, n) if sieve[i] == True]\n \n\\ No newline at end of file\n-find_prime_num(m, n)\n+print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639035782607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,15 +24,16 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  sieve = [True] * (n-m)\n-  num = int(n ** 0.5)\n-  for i in range(2, num + 1):\n-        if sieve[i] == True:           # i가 소수인 경우 \n-            for j in range(i+i, n, i): # i이후 i의 배수들을 False 판정\n-                sieve[j] = False\n+  n += 1                            # for문 사용을 위한 n += 1\n+  prime = [True] * n                # n개의 [True]가 있는 리스트 생성\n+  for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n+    if prime[i]:                    # prime[i]가 True일때\n+      for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n+        prime[j] = False\n \n-    # 소수 목록 산출\n-  return [i for i in range(2, n) if sieve[i] == True]\n+  for i in range(m, n):\n+    if i > 1 and prime[i] == True:  # 1 이상이면서 남은 소수들을 출력\n+      print(i)\n \n print(find_prime_num(m, n))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639035791029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,5 +35,5 @@\n   for i in range(m, n):\n     if i > 1 and prime[i] == True:  # 1 이상이면서 남은 소수들을 출력\n       print(i)\n \n-print(find_prime_num(m, n))\n\\ No newline at end of file\n+find_prime_num(m, n)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1639035868009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   n += 1                            # for문 사용을 위한 n += 1\n-  prime = [True] * n                # n개의 [True]가 있는 리스트 생성\n+  prime = [True] * (n-m)               # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n"
                },
                {
                    "date": 1639035879810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   n += 1                            # for문 사용을 위한 n += 1\n-  prime = [True] * (n-m)               # n개의 [True]가 있는 리스트 생성\n+  prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n"
                },
                {
                    "date": 1639036043974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,8 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  n += 1                            # for문 사용을 위한 n += 1\n   prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n"
                },
                {
                    "date": 1639036087907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n+  prime = [True] * int(n-m)              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n"
                },
                {
                    "date": 1639036111229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  prime = [True] * int(n-m)              # n개의 [True]가 있는 리스트 생성\n+  print (n, m)\n+  prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n"
                },
                {
                    "date": 1639036122119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  print (n, m)\n+  print (n - m)\n   prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n"
                },
                {
                    "date": 1639036134278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n   print (n - m)\n-  prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n+  prime = [True] * 13              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n"
                },
                {
                    "date": 1639036164729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n \n def find_prime_num (m,n) :\n   print (n - m)\n   prime = [True] * 13              # n개의 [True]가 있는 리스트 생성\n-  for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n+  for i in range(m, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n \n"
                },
                {
                    "date": 1639036175926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,10 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  print (n - m)\n-  prime = [True] * 13              # n개의 [True]가 있는 리스트 생성\n-  for i in range(m, int(n**0.5)+1): # n의 제곱근까지만 검사\n+  prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n+  for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n \n"
                },
                {
                    "date": 1639036271231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n+  n += 1\n   prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n"
                },
                {
                    "date": 1639036376744,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  n += 1\n+  n += 1                            # \n   prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n"
                },
                {
                    "date": 1639036407316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,18 +16,18 @@\n # 1 <= M <= N <= 1,000,000 의 자연수\n \n # 처리\n # M <= prime_num <= N\n-# M 과 N 사이의 수를 반복하면서 소수인지 판단하여 출력\n+# 에라테네스토의 체 사용\n \n # 출력\n # 한 줄에 하나씩, 작은 순서로 소수 출력\n \n m, n = map(int,input().split())\n \n def find_prime_num (m,n) :\n-  n += 1                            # \n-  prime = [True] * n              # n개의 [True]가 있는 리스트 생성\n+  n += 1                            # for문 사용을 위한 n += 1\n+  prime = [True] * n                # n개의 [True]가 있는 리스트 생성\n   for i in range(2, int(n**0.5)+1): # n의 제곱근까지만 검사\n     if prime[i]:                    # prime[i]가 True일때\n       for j in range(2*i, n, i):    # prime 내 i의 배수들을 False로 변환\n         prime[j] = False\n"
                },
                {
                    "date": 1639036415538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n # 1 <= M <= N <= 1,000,000 의 자연수\n \n # 처리\n # M <= prime_num <= N\n-# 에라테네스토의 체 사용\n+# 에라토스테네스의 체 사용\u001c\n \n # 출력\n # 한 줄에 하나씩, 작은 순서로 소수 출력\n \n"
                },
                {
                    "date": 1639036427684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,10 @@\n # 1 <= M <= N <= 1,000,000 의 자연수\n \n # 처리\n # M <= prime_num <= N\n-# 에라토스테네스의 체 사용\u001c\n+# 에라토스테네스의 체 사용\n+# \n \n # 출력\n # 한 줄에 하나씩, 작은 순서로 소수 출력\n \n"
                },
                {
                    "date": 1639036439406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,11 @@\n \n # 처리\n # M <= prime_num <= N\n # 에라토스테네스의 체 사용\n-# \n+# 일정 범위내 수열에서 배수들을 제거해 소수만 남기는 방법\n \n+\n # 출력\n # 한 줄에 하나씩, 작은 순서로 소수 출력\n \n m, n = map(int,input().split())\n"
                }
            ],
            "date": 1639017101785,
            "name": "Commit-0",
            "content": "# M이상 N이하의 소수를 모두 출력하는 프로그램을 작성하시오.\n"
        }
    ]
}